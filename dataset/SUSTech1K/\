#!/usr/bin/env python

import numpy as np
import rclpy
import pickle
import os
import time
from sensor_msgs_py import point_cloud2
from rclpy.node import Node
from std_msgs.msg import Header
from sensor_msgs.msg import PointCloud2, PointField

import sys
sys.path.append('/home/sx-zhang/work/CNN-LSTM-master/util')
from voxelize import frame_voxelize, frame_rotation
from gait_voxelize import get_dir

#sample = 371
frame_num = 10
w = 40
l = 40
h = 64

class FrameChecker(Node):
    def __init__(self):
        super().__init__('frame_checker')
        self.pub = self.create_publisher(PointCloud2, 'frame_xyz', 10)
        self.field = [PointField(name = 'x', offset = 0, datatype = 7, count = 1),
                        PointField(name = 'y', offset = 4, datatype = 7, count = 1),
                        PointField(name = 'z', offset = 8, datatype = 7, count = 1),
                        PointField(name = 'intensity', offset = 12, datatype = 2, count = 1)]
        self.points = []
        self.header = Header(frame_id = 'velodyne')

    def publish(self):
        pubdata = point_cloud2.create_cloud(self.header, self.field, self.points)
        self.pub.publish(pubdata)
        print('publishing')

#raw sample located at SUSTech1K-Released-pkl
def display_raw(data_root):
    global h, w, l, frame_num
    #with open(data_root.format(str(sample).zfill(4)), 'rb') as f:
    #    data = pickle.load(f)
    #    for iframe in range(len(data)):
    #        checker.points = data[iframe]
    #        checker.publish()
    #        time.sleep(1)
    with open(data_root, 'rb') as f:
        data = pickle.load(f)
        voxel_sample = np.zeros((h, w, l))
        alpha = get_dir(data)
        for iframe in range(len(data)):
            data_frame = frame_rotation(data[iframe], alpha)
            print(len(data_frame))
            try:
                voxel_data, point_num = frame_voxelize(data_frame)
                voxel_sample += voxel_data[...,-1]
                voxel_data, _ = frame_voxelize(data[iframe])
                for z in range(h):
                    for x in range(w):
                        for y in range(l):
                            if not voxel_data[z,x,y,3] == 0:
                                checker.points.append([float(x/32), float(y/32), float(z/32), voxel_data[z, x, y, 3]])
            except ValueError as e:
                print(iframe, ':',  e)
                            #p = [voxel_data[z, x, y, 1], voxel_data[z, x, y, 2], voxel_data[z, x, y, 0], int(voxel_data[z, x, y, 3])]
                            #checker.points.append(p)
                            #print(p)
            #if iframe == 7:
            time.sleep(0.5)
            checker.publish()
            #print(iframe)
            #print([point for point in checker.points if point[1]!=0])
            time.sleep(0.5)
            checker.points = []

    #sample_points = []
    #for z in range(h):
    #    for x in range(w):
    #        for y in range(l):
    #            if not voxel_sample[z,x,y] == 0:
    #                sample_points.append([float(x/32), float(y/32), float(z/32), voxel_sample[z, x, y]])
    #checker.points = sample_points
    #checker.publish()
    #time.sleep(1)

#train sample located at SUSTech1K-Released-voxel
def display_train(data_root):
    data = np.load(data_root, allow_pickle=True)[0]
    for z in range(h):
        for x in range(w):
            for y in range(l):
                if not data[z,x,y] == 0:
                    checker.points.append([float(x/32), float(y/32), float(z/32), data[z, x, y]])
    time.sleep(1)
    checker.publish()
    time.sleep(1)
    checker.points = []


if __name__ == '__main__':
    rclpy.init(args=None)
    checker = FrameChecker()
    #data_root = '/home/sx-zhang/SUSTech1K/SUSTech1K-Released-pkl/0393/01-cr/270-far/00-270-far-LiDAR-PCDs.pkl'
    #data_root = '/home/sx-zhang/SUSTech1K/SUSTech1K-Released-pkl/0875/00-nm/270-far/00-270-far-LiDAR-PCDs.pkl'
    #display_raw(data_root)
    data_root = '/home/sx-zhang/SUSTech1K/SUSTech1K-Released-voxel/00-nm/315/0007_0.npy'
    display_train(data_root)

    #view = '_315_'
    #data_root = '/home/sx-zhang/SUSTech1K/SUSTech1K-Released-voxel/tmp/probe'
    #sample_list = os.listdir(data_root)
    #for sample in sample_list:
    #    if view in sample:
    #        display_train(os.path.join(data_root, sample))
    #        print('plotting: ', sample)
